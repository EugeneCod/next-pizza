'use server';

import { cookies } from 'next/headers';

import { prisma } from '@/prisma/prisma-client';
import { createPayment, sendEmail } from '@/shared/lib';

import type { CheckoutFormSchema } from '@/shared/constants/checkout-form-schema';
import { OrderStatus, Prisma } from '@prisma/client';
import { PayOrderEmailTemplate, VerificationUserTemplate } from '@/shared/components/shared';
import { getUserSession } from '@/shared/lib/get-user-session';
import { hashSync } from 'bcrypt';
import { MESSAGES } from '@/shared/constants/messages';

export async function createOrder(data: CheckoutFormSchema) {
  try {
    const { firstName, lastName, email, phone, address, comment } = data;
    const cookieStore = cookies();
    const cartToken = cookieStore.get('cartToken')?.value;

    if (!cartToken) {
      throw new Error('Cart token not found');
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productItem: {
              include: {
                product: true,
              },
            },
          },
        },
      },
      where: {
        token: cartToken,
      },
    });

    if (!userCart) {
      throw new Error('Cart not found');
    }

    if (userCart?.totalAmount === 0) {
      throw new Error('Cart is empty');
    }

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        fullName: `${firstName} ${lastName}`,
        email,
        phone,
        address,
        comment,
        token: cartToken,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),
      },
    });

    // –û–±–Ω—É–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–µ id
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–µ id
    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    // –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ
    const paymentData = await createPayment({
      amount: order.totalAmount,
      orderId: order.id,
      description: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id,
    });

    if (!paymentData) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂');
    }

    // –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑ –ë–î –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        paymentId: paymentData.id,
      },
    });

    const paymentUrl = paymentData.confirmation.confirmation_url;

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–∞ –ø–æ—á—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await sendEmail(
      data.email,
      'Next-Pizza / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #' + order.id,
      PayOrderEmailTemplate({
        orderId: order.id,
        totalAmount: order.totalAmount,
        paymentUrl,
      }),
    );

    // –í–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–ø–ª–∞—Ç–æ–π
    return paymentUrl;
  } catch (err) {
    console.log('[CreateOrder] Server error', err);
  }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession();

    if (!currentUser) {
      throw new Error('–°–µ—Å—Å–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞');
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    if (!findUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω');
    }

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: body.password ? hashSync(body.password as string, 10) : findUser?.password,
      },
    });
  } catch (err) {
    console.log('Error [UPDATE_USER]', err);
    throw err;
  }
}

export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });

    if (user) {
      if (!user.verified) {
        throw new Error(MESSAGES.EMAIL_NOT_CONFIRMED);
      }
      throw new Error(MESSAGES.USER_EXISTS);
    }

    const createdUser = await prisma.user.create({
      data: {
        fullName: body.fullName,
        email: body.email,
        password: hashSync(body.password, 10),
      },
    });

    const code = Math.floor(100000 + Math.random() * 900000).toString();

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    });

    await sendEmail(
      createdUser.email,
      'Next Pizza / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      VerificationUserTemplate({
        code,
      }),
    );
  } catch (err) {
    console.log('Error [CREATE_USER]', err);
    throw err;
  }
}
