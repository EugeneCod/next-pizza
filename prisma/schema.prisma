generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN 
}

model User {
  /* Поле айди, число, уникалиный идентификатор, при создании нового увеличивается на единицу */
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  fullName  String
  email     String @unique
  password  String
  role      UserRole @default(USER)
  verified  DateTime
  /* Привязка к социальной сети, если авторизован через нее */
  /* TODO Продумать возможность хранения массива провайдеров */
  provider  String?
  providerId String?
  cart      Cart?
  verificatonCode VerificatonCode?
  orders    Order[]
}

model Category {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  name      String @unique
  products  Product[]
}

model Product {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  name      String
  imageUrl  String
  /* Установка связи продукта к id категории */
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  ingredients Ingredient[]
  items ProductItem[]
}

model ProductItem {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  price     Int
  size      Int?
  pizzaType Int?
  product Product @relation(fields: [productId], references: [id])
  productId Int
  cartItems  CartItem[]
}

model Ingredient {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  name      String
  price     Int
  imageUrl  String
  products  Product[]
  cartItems CartItem[]
}

model Cart {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  totalAmount Int @default(0)
  /* Токен нужен для случая, когда пользователь не зарегистрирован */
  token String
  items CartItem[]
  user User? @relation(fields: [userId], references: [id])
  userId Int? @unique
  
}

model CartItem {
  id         Int @id @default(autoincrement())
  createdAt  DateTime @default(now())
  udatedAt   DateTime @updatedAt

  quantity   Int @default(1)
  ingredients Ingredient[]

  productItem ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart      Cart @relation(fields: [cartId], references: [id])
  cartId    Int
}

model Order {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  udatedAt  DateTime @updatedAt

  token     String
  totalAmount Int
  status    OrderStatus
  /* Сохранение идентификатора платежа для возможности отмены платежа */
  paymentId String?
  items     Json
  fullName  String
  address   String
  email     String
  phone     String
  comment   String?

  user      User? @relation(fields: [userId], references: [id])
  userId    Int?
}

model VerificatonCode {
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  code      String @unique

  user      User @relation(fields: [userId], references: [id])
  userId    Int @unique
  @@unique([userId, code])
}